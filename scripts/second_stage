#!/bin/bash

# Perform a debootstrap second stage installation
#
# This script is intended to be called by the `build_rootfs` script as the
# executable to run when chrooting into the first pass root filesystem that
# debootstrap creates.  It is quite specific to the intended application and
# uses constants to define some options that may need to change in the future,
# notably extra packages to include during the first pass that debootstrap
# forgets to pull down by default.
#
# The primary operations it performs are:
#   * Completes the debootstrap --second-stage process from the chroot
#     environment
#   * Configures /etc/fstab for the expected SD card image, which is a small
#     FAT32 filesystem that will be mounted at /boot as well as an EXT4
#     root filesystem. This is a very common SD partition pattern used for
#     Xilinx based embedded systems (see the relevant sections of the script for
#     details).
#   * Sets up a serial port with root access because we're an embedded system
#   * Configures a wired Ethernet interface
#   * Sets up an SSH server and instructs systemd to regenerate new SSH keys the
#     first time the system is booted. This requires that a proc filesystem be
#     mounted in the chroot subdirectory. If the second stage script fails for
#     any reason, the caller should make sure that if a proc is mounted, it gets
#     unmounted afterwards.
#   * Creates a non-root user, with sudo access
#   * On the way out, removes the pieces of itself left behind

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    printf '%s\n' "Script should be executed not sourced" >&2
    return 1
fi
if [[ "${EUID}" -ne 0 ]]; then
    printf '%s\n' "Script must be run as root" >&2
    exit 1
fi

source "/tmp/common.sh" >/dev/null 2>&1 || \
    { printf '%s\n' "Could not import /tmp/common.sh" >&2; exit 1; }
source "/tmp/constants.sh" >/dev/null 2>&1 || \
    { err "Could not import /tmp/constants.sh"; exit 1; }

export TERM=linux

build_log="second-stage-$(timestamp).log"
if ! /debootstrap/debootstrap \
    --second-stage >"${build_log}" 2>&1; then
    err "Second stage failed"
fi

# Set up /etc/fstab
boot_part="/dev/mmcblk0${UZED_SBC_SD_PART_BOOT}"
root_part="/dev/mmcblk0${UZED_SBC_SD_PART_ROOT}"
# Need the root partition number later so that we can resize it
root_partn="${UZED_SBC_SD_PART_ROOT#p}"

# Leave the spaces alone here so that after variable expansion this is still
# formatted appropriately
cat > /etc/fstab << EOF
# Device            Mount       Type        Options         Dump    Check
$root_part      /           ext4        defaults        0       1
$boot_part      /boot       vfat        nosuid,nodev    0       2
proc                /proc       proc        defaults        0       0
sys                 /sys        sysfs       defaults        0       0
config              /config     configfs    defaults        0       0
EOF

# Configure the serial port
cat > /etc/securetty << EOF
# Zynq PS UART
"${DEBIAN_SERIAL}"
EOF

# Add the hostname to a couple of files
printf '%s\n' "${DEBIAN_HOSTNAME}" > /etc/hostname
sed -i '/^127.*localhost$/{p;s/localhost/'"${DEBIAN_HOSTNAME}"'/}' /etc/hosts

# Configure networking
cat > /etc/network/interfaces << EOF
# Loopback interface
auto lo
iface lo inet loopback

# Wired ethernet interface
auto end0
iface end0 inet dhcp
EOF

# Set up a non-root user with sudoer privileges
useradd \
    -G adm,dialout,kmem,cdrom,floppy,audio,dip,video,netdev,plugdev,staff,i2c \
    --create-home \
    --shell /bin/bash \
    "${DEBIAN_USER}"

passwd "${DEBIAN_USER}" << EOF
${DEBIAN_PASS}
${DEBIAN_PASS}
EOF

echo "${DEBIAN_USER}  ALL=NOPASSWD: ALL" >> /etc/sudoers

# Resynchronize the package index files prior to installing the SSH server
# packages and configuration
apt-get update >> "${build_log}" 2>&1

# Set up SSH server using the tasksel package (which requires /proc to be
# mounted for some reason) along with the standard packages we would expect
# (these are in addition to what was installed during the first state with the
# --include options)
if ! mount -t proc proc /proc; then
    err "Unable to mount proc filesystem"
    exit 1
fi
tasksel --new-install install ssh-server standard
umount /proc

# Regenerate SSH keys on first boot in case we have multiple images out there on
# the network (unlikely, but who knows how this will get repurposed)
cat > /etc/systemd/system/regenerate_ssh_host_keys.service << EOF
[Unit]
Description=Regenerate SSH host keys
Before=ssh.service

[Service]
Type=oneshot
ExecStartPre=-/bin/sh -c "/bin/rm -fv /etc/ssh/ssh_host_*_key*"
ExecStart=/usr/bin/ssh-keygen -A -v
ExecStartPost=/bin/systemctl disable regenerate_ssh_host_keys

[Install]
WantedBy=multi-user.target
EOF

# Enable the new service
systemctl enable regenerate_ssh_host_keys >> "${build_log}" 2>&1

# Resize the root partition on first boot, since we will likely have more space
# available to us and need to use it for development purposes
cat > /etc/systemd/system/resize_rootfs.service << EOF
[Unit]
Description=Resize root file system
After=basic.target

[Service]
Type=oneshot
ExecStartPre=-/usr/bin/growpart /dev/mmcblk0 ${root_partn}
ExecStart=-/sbin/resize2fs /dev/mmcblk0${root_part}
ExecStartPost=/bin/systemctl disable resize_rootfs

[Install]
WantedBy=multi-user.target
EOF

# Enable the new service
systemctl enable resize_rootfs >> "${build_log}" 2>&1

# Some final things to do while still in the chroot environment
{
    ldconfig --verbose
    apt-get clean
    rm -fv /tmp/*
} >> "${build_log}" 2>&1

